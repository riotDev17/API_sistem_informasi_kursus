// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id_users                 String        @id @default(uuid())
  nama                     String        @db.VarChar(50)
  email                    String        @unique @db.VarChar(50)
  username                 String        @db.VarChar(50)
  password                 String        @db.VarChar(100)
  role                     String        @db.VarChar(25)
  otp                      String?       @db.VarChar(100)
  foto_profil              String?       @db.Text
  tempat_lahir             String?       @db.Text
  tanggal_lahir            String?       @db.VarChar(50)
  jenis_kelamin            String?       @db.VarChar(50)
  no_telepon               String?       @db.VarChar(25)
  alamat                   String?       @db.Text
  instagram                String?       @db.Text
  whatsapp                 String?       @db.VarChar(25)
  verifikasi_email         Boolean       @default(false)
  tanggal_verifikasi_email String?       @db.VarChar(50)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  Pembayaran               Pembayaran[]
  Pendaftaran              Pendaftaran[]

  @@map("users")
}

model Agama {
  id_agama    String        @id @default(uuid())
  nama_agama  String        @db.VarChar(50)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Pendaftaran Pendaftaran[]

  @@map("agama")
}

model Pekerjaan {
  id_pekerjaan    String        @id @default(uuid())
  nama_pekerjaan  String        @db.VarChar(50)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  pendaftaranAyah Pendaftaran[] @relation("PekerjaanAyah")
  pendaftaranIbu  Pendaftaran[] @relation("PekerjaanIbu")

  @@map("pekerjaan")
}

model Pendidikan {
  id_pendidikan   String        @id @default(uuid())
  nama_pendidikan String        @db.VarChar(50)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  PendaftaranAyah Pendaftaran[] @relation("PendidikanAyah")
  PendaftaranIbu  Pendaftaran[] @relation("PendidikanIbu")

  @@map("pendidikan")
}

model Penghasilan {
  id_penghasilan     String        @id @default(uuid())
  jumlah_penghasilan String        @db.VarChar(50)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  PendaftaranAyah    Pendaftaran[] @relation("PenghasilanAyah")
  PendaftaranIbu     Pendaftaran[] @relation("PenghasilanIbu")

  @@map("penghasilan")
}

model Sekolah {
  id_sekolah         String        @id @default(uuid())
  npsn               Int           @db.Integer
  nama_sekolah       String        @db.VarChar(50)
  alamat             String        @db.Text
  kode_pos           Int           @db.Integer
  provinsi           String        @db.VarChar(50)
  kabupaten          String        @db.VarChar(50)
  kecamatan          String        @db.VarChar(50)
  kelurahan          String        @db.VarChar(50)
  status_sekolah     String        @db.VarChar(25)
  jenjang_pendidikan String        @db.VarChar(25)
  akreditasi         String        @db.VarChar(20)
  email_sekolah      String        @db.VarChar(50)
  no_telepon_sekolah String        @db.VarChar(25)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Pendaftaran        Pendaftaran[]

  @@map("sekolah")
}

model Pengajar {
  id_pengajar         String   @id @default(uuid())
  nama_pengajar       String   @db.VarChar(50)
  no_telepon_pengajar String   @db.VarChar(25)
  gelar_pengajar      String   @db.VarChar(50)
  keahlian_pengajar   String   @db.Text
  pengalaman_pengajar String   @db.Text
  foto_pengajar       String   @db.Text
  sertifikat_pengajar String   @db.Text
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Kursus              Kursus[]

  @@map("pengajar")
}

model Kursus {
  id_kursus        String        @id @default(uuid())
  nama_kursus      String        @db.VarChar(50)
  topik_kursus     String        @db.VarChar(50)
  jenjang_kursus   String        @db.VarChar(50)
  pengajar_ID      String
  jam_mulai        String        @db.VarChar(50)
  jam_selesai      String        @db.VarChar(50)
  tanggal_mulai    String        @db.VarChar(50)
  tanggal_selesai  String        @db.VarChar(50)
  hari_kursus      String[]      @db.VarChar(50)
  harga_kursus     Int           @db.Integer
  foto_kursus      String        @db.Text
  syarat_kursus    String        @db.Text
  deskripsi_kursus String        @db.Text
  modul_kursus     String        @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  pengajar         Pengajar      @relation(fields: [pengajar_ID], references: [id_pengajar])
  Pendaftaran      Pendaftaran[]

  @@map("kursus")
}

model Pendaftaran {
  id_pendaftaran      String       @id @default(uuid())
  users_ID            String
  kursus_ID           String
  nisn                Int          @db.Integer
  nis                 Int          @db.Integer
  nik                 Int          @db.Integer
  nama_lengkap        String       @db.VarChar(50)
  jenis_kelamin       String       @db.VarChar(50)
  pas_foto            String       @db.Text
  tempat_lahir        String       @db.VarChar(50)
  tanggal_lahir       String       @db.VarChar(50)
  agama_ID            String
  email               String       @db.VarChar(50)
  no_telepon          String       @db.VarChar(25)
  alamat              String       @db.Text
  nama_ayah           String       @db.VarChar(50)
  pekerjaan_ayah_ID   String
  no_telepon_ayah     String       @db.VarChar(25)
  pendidikan_ayah_ID  String
  penghasilan_ayah_ID String
  nama_ibu            String       @db.VarChar(50)
  pekerjaan_ibu_ID    String
  no_telepon_ibu      String       @db.VarChar(25)
  pendidikan_ibu_ID   String
  penghasilan_ibu_ID  String
  slip_gaji_ayah_ibu  String       @db.Text
  foto_kk             String       @db.Text
  sekolah_ID          String
  nilai_semester_1    Int          @db.Integer
  nilai_semester_2    Int          @db.Integer
  nilai_semester_3    Int          @db.Integer
  nilai_semester_4    Int          @db.Integer
  nilai_semester_5    Int?         @db.Integer
  nilai_semester_6    Int?         @db.Integer
  raport              String       @db.Text
  prestasi            String?      @db.Text
  status_pendaftaran  String?      @db.VarChar(50)
  tanggal_pendaftaran DateTime     @default(now())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  kursus              Kursus       @relation(fields: [kursus_ID], references: [id_kursus])
  users               Users        @relation(fields: [users_ID], references: [id_users])
  agama               Agama        @relation(fields: [agama_ID], references: [id_agama])
  pekerjaan_ayah      Pekerjaan?   @relation("PekerjaanAyah", fields: [pekerjaan_ayah_ID], references: [id_pekerjaan])
  pekerjaan_ibu       Pekerjaan?   @relation("PekerjaanIbu", fields: [pekerjaan_ibu_ID], references: [id_pekerjaan])
  pendidikan_ayah     Pendidikan?  @relation(name: "PendidikanAyah", fields: [pendidikan_ayah_ID], references: [id_pendidikan])
  pendidikan_ibu      Pendidikan?  @relation("PendidikanIbu", fields: [pendidikan_ibu_ID], references: [id_pendidikan])
  penghasilan_ayah    Penghasilan? @relation(name: "PenghasilanAyah", fields: [penghasilan_ayah_ID], references: [id_penghasilan])
  penghasilan_ibu     Penghasilan? @relation(name: "PenghasilanIbu", fields: [penghasilan_ibu_ID], references: [id_penghasilan])
  sekolah             Sekolah      @relation(fields: [sekolah_ID], references: [id_sekolah])
  Pembayaran          Pembayaran[]
  Pengumuman          Pengumuman[]

  @@map("pendaftaran")
}

model Pembayaran {
  id_pembayaran     String      @id @default(uuid())
  users_ID          String
  pendaftaran_ID    String
  bukti_pembayaran  String      @db.Text
  status_pembayaran String      @db.VarChar(50)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  users             Users       @relation(fields: [users_ID], references: [id_users])
  pendaftaran       Pendaftaran @relation(fields: [pendaftaran_ID], references: [id_pendaftaran])

  @@map("pembayaran")
}

model Pengumuman {
  id_pengumuman    String      @id @default(uuid())
  pendaftaran_ID   String
  hasil_pengumuman String      @db.VarChar(50)
  nilai_test       Int         @db.Integer
  nilai_interview  Int         @db.Integer
  nilai_rata_rata  Int         @db.Integer
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  pendaftaran      Pendaftaran @relation(fields: [pendaftaran_ID], references: [id_pendaftaran])

  @@map("pengumuman")
}
